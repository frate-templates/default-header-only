cmake_minimum_required(VERSION {{cmake_version}})

project(
  {{project_name}} 
  VERSION 1.0
  DESCRIPTION {{project_description}} 
  {%if lang ==  "cpp" %}LANGUAGES CXX
  {%else if lang ==  "c" %}LANGUAGES C
  {%endif%}
)

# Define the library target
add_library(${PROJECT_NAME} INTERFACE)

# Specify the include directories for the library consumer
target_include_directories(${PROJECT_NAME} INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
# Installation rules
include(GNUInstallDirs)

include_directories($CMAKE_SOURCE_DIR/{{ include_dir }})
set(HEADER_DIR $CMAKE_SOURCE_DIR/{{ include_dir }})

set(BUILD_DIR {{ build_dir }})
set_target_properties(
  ${PROJECT_NAME} 
  PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY build
)
set_target_properties(
  ${PROJECT_NAME} 
  PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
)
set_target_properties(
  ${PROJECT_NAME} 
  PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib"
)

install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# Create and install CMake config files for your library
install(TARGETS ${PROJECT_NAME}
    EXPORT ${PROJECT_NAME}Targets
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(EXPORT ${PROJECT_NAME}Targets
    FILE ${PROJECT_NAME}Config.cmake
    # TODO
    #DEASTL PAY ATTENTION TO THIS we need a namespace variable
    #in the project template
    NAMESPACE {{namespace}}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

